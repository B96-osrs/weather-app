(()=>{"use strict";var n,e,t,r,o={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"* {\n  box-sizing: border-box;\n}\nbody {\n  background-image: none;\n  margin: 0;\n}\n\n#search-icon {\n  width: 24px;\n  height: 24px;\n}\n\n.header {\n  display: flex;\n  background-color: rgba(0, 0, 0, 0.705);\n  height: 3rem;\n  padding: 24px;\n}\n\n#search {\n  display: flex;\n  align-items: center;\n  margin-left: auto;\n  gap: 12px;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,iBAAiB;EACjB,SAAS;AACX",sourcesContent:["* {\n  box-sizing: border-box;\n}\nbody {\n  background-image: none;\n  margin: 0;\n}\n\n#search-icon {\n  width: 24px;\n  height: 24px;\n}\n\n.header {\n  display: flex;\n  background-color: rgba(0, 0, 0, 0.705);\n  height: 3rem;\n  padding: 24px;\n}\n\n#search {\n  display: flex;\n  align-items: center;\n  margin-left: auto;\n  gap: 12px;\n}\n"],sourceRoot:""}]);const c=i},566:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'.switch-box {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 1.2rem;\n  font-weight: bold;\n}\n.switch {\n  position: relative;\n  display: block;\n  width: 3.7rem;\n  height: 2rem;\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider */\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #a5a8a6;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\n.slider:before {\n  position: absolute;\n  content: "";\n  height: 1.6rem;\n  width: 1.6rem;\n  left: 0.2rem;\n  bottom: 0.2rem;\n  background-color: white;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\ninput:checked + .slider {\n  background-color: #a5a8a6;\n}\n\ninput:focus + .slider {\n  background-color: #a5a8a6;\n}\n\ninput:checked + .slider:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}\n\n/* Rounded sliders */\n.slider.round {\n  border-radius: 2rem;\n}\n\n.slider.round:before {\n  border-radius: 50%;\n}\n',"",{version:3,sources:["webpack://./src/switch.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,iBAAiB;EACjB,iBAAiB;AACnB;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,aAAa;EACb,YAAY;AACd;;AAEA,+BAA+B;AAC/B;EACE,UAAU;EACV,QAAQ;EACR,SAAS;AACX;;AAEA,eAAe;AACf;EACE,kBAAkB;EAClB,eAAe;EACf,MAAM;EACN,OAAO;EACP,QAAQ;EACR,SAAS;EACT,yBAAyB;EACzB,wBAAwB;EACxB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,cAAc;EACd,aAAa;EACb,YAAY;EACZ,cAAc;EACd,uBAAuB;EACvB,wBAAwB;EACxB,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,mCAAmC;EACnC,+BAA+B;EAC/B,2BAA2B;AAC7B;;AAEA,oBAAoB;AACpB;EACE,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:['.switch-box {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 1.2rem;\n  font-weight: bold;\n}\n.switch {\n  position: relative;\n  display: block;\n  width: 3.7rem;\n  height: 2rem;\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider */\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #a5a8a6;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\n.slider:before {\n  position: absolute;\n  content: "";\n  height: 1.6rem;\n  width: 1.6rem;\n  left: 0.2rem;\n  bottom: 0.2rem;\n  background-color: white;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\ninput:checked + .slider {\n  background-color: #a5a8a6;\n}\n\ninput:focus + .slider {\n  background-color: #a5a8a6;\n}\n\ninput:checked + .slider:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}\n\n/* Rounded sliders */\n.slider.round {\n  border-radius: 2rem;\n}\n\n.slider.round:before {\n  border-radius: 50%;\n}\n'],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},654:(n,e,t)=>{var r=t(379),o=t.n(r),a=t(795),i=t.n(a),c=t(569),s=t.n(c),d=t(565),A=t.n(d),u=t(216),l=t.n(u),p=t(589),h=t.n(p),m=t(426),f={};f.styleTagTransform=h(),f.setAttributes=A(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=l(),o()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals},473:(n,e,t)=>{var r=t(379),o=t.n(r),a=t(795),i=t.n(a),c=t(569),s=t.n(c),d=t(565),A=t.n(d),u=t(216),l=t.n(u),p=t(589),h=t.n(p),m=t(566),f={};f.styleTagTransform=h(),f.setAttributes=A(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=l(),o()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],d=r.base?s[0]+r.base:s[0],A=a[d]||0,u="".concat(d," ").concat(A);a[d]=A+1;var l=t(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==l)e[l].references++,e[l].updater(p);else{var h=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=r(n,o),d=0;d<a.length;d++){var A=t(a[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},516:(n,e,t)=>{t.d(e,{o:()=>a});const r=t.p+"40fca553e34b08fdff30.jpg",o=t.p+"a08e64ef5adb6a6c707d.jpg",a={displayWeather:function(n,e){let t=document.getElementById("location"),r=document.getElementById("date-time"),o=document.getElementById("temperature"),a=document.getElementById("humidity"),i=document.getElementById("wind"),c=document.getElementById("cloud"),s=document.getElementById("weather-icon");t.textContent=n.location,r.textContent=n.time,a.textContent="Humidity: "+n.humidity+" %",c.textContent="Cloud Cover: "+n.cloud,s.src=n.iconSource,"F"===e?(o.textContent=n.tempF+"° F",i.textContent="Wind: "+n.windMph+" mph"):(o.textContent=n.tempC+"° C",i.textContent="Wind: "+n.windKph+" kph")},highlightUnit:function(n){let e=document.querySelector(".celsius"),t=document.querySelector(".fahrenheit");"F"===n?(e.style.color="black",t.style.color="orange"):(t.style.color="black",e.style.color="orange")},displayBackground:function(n){n.condition.includes("rain")?document.body.style.backgroundImage=url(r):document.body.style.backgroundImage=o}}},138:(n,e,t)=>{t.a(n,(async(n,e)=>{try{var r=t(891),o=t(516),a=(t(654),t(473),t(485));let i="C";const c=document.getElementById("search-icon"),s=document.querySelector(".switch-checkbox"),d=document.getElementById("search-input");async function A(){let n=document.getElementById("search-input");u=await r.y.getWeather(n.value);try{o.o.displayWeather(u,i),o.o.displayBackground(u)}catch{console.log("error")}}c.src=a;let u=await r.y.getWeather("Linz");o.o.displayWeather(u,i),o.o.highlightUnit(i),o.o.displayBackground(u),d.addEventListener("keypress",(function(n){"Enter"===n.key&&c.click()})),c.addEventListener("click",(function(){A()})),s.addEventListener("change",(function(n){s.checkboxValue=n.target.checked?"on":"off",i="on"===s.checkboxValue?"F":"C",o.o.highlightUnit(i),o.o.displayWeather(u,i)})),e()}catch(l){e(l)}}),1)},891:(n,e,t)=>{t.d(e,{y:()=>r});const r={getWeather:async function(n){const e=await async function(n){const e=await fetch(`http://api.weatherapi.com/v1/current.json?key=27136f6df35e4ca398405149231208&q=${n}&aqi=yes\n      `),t=await e.json();return console.log(t),t}(n);return{location:e.location.name,time:e.current.last_updated,tempC:e.current.temp_c,tempF:e.current.temp_f,windMph:e.current.wind_mph,windKph:e.current.wind_kph,humidity:e.current.humidity,cloud:e.current.cloud,condition:e.current.condition.text,iconSource:`https://${e.current.condition.icon}`}}}},485:(n,e,t)=>{n.exports=t.p+"9d944b720b2341b1ad38.svg"}},a={};function i(n){var e=a[n];if(void 0!==e)return e.exports;var t=a[n]={id:n,exports:{}};return o[n](t,t.exports,i),t.exports}n="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=n=>{n&&n.d<1&&(n.d=1,n.forEach((n=>n.r--)),n.forEach((n=>n.r--?n.r++:n())))},i.a=(o,a,i)=>{var c;i&&((c=[]).d=-1);var s,d,A,u=new Set,l=o.exports,p=new Promise(((n,e)=>{A=e,d=n}));p[e]=l,p[n]=n=>(c&&n(c),u.forEach(n),p.catch((n=>{}))),o.exports=p,a((o=>{var a;s=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[n])return o;if(o.then){var a=[];a.d=0,o.then((n=>{i[e]=n,r(a)}),(n=>{i[t]=n,r(a)}));var i={};return i[n]=n=>n(a),i}}var c={};return c[n]=n=>{},c[e]=o,c})))(o);var i=()=>s.map((n=>{if(n[t])throw n[t];return n[e]})),d=new Promise((e=>{(a=()=>e(i)).r=0;var t=n=>n!==c&&!u.has(n)&&(u.add(n),n&&!n.d&&(a.r++,n.push(a)));s.map((e=>e[n](t)))}));return a.r?d:i()}),(n=>(n?A(p[t]=n):d(l),r(c)))),c&&c.d<0&&(c.d=0)},i.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return i.d(e,{a:e}),e},i.d=(n,e)=>{for(var t in e)i.o(e,t)&&!i.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),i.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;i.g.importScripts&&(n=i.g.location+"");var e=i.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var t=e.getElementsByTagName("script");if(t.length)for(var r=t.length-1;r>-1&&!n;)n=t[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=n})(),i.nc=void 0,i(138)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,